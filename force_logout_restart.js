// Script pour d√©connexion compl√®te et nettoyage
// √Ä ex√©cuter dans la console du navigateur

console.log('üîÑ D√©connexion compl√®te et nettoyage...');

async function forceLogoutAndClean() {
    try {
        console.log('1Ô∏è‚É£ D√©connexion Supabase...');
        
        if (window.supabase) {
            const { error } = await window.supabase.auth.signOut();
            if (error) {
                console.error('‚ùå Erreur d√©connexion:', error);
            } else {
                console.log('‚úÖ D√©connexion Supabase r√©ussie');
            }
        }
        
        console.log('2Ô∏è‚É£ Nettoyage localStorage...');
        
        // Nettoyer toutes les cl√©s li√©es √† Supabase et auth
        const keysToRemove = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && (
                key.includes('supabase') || 
                key.includes('auth') || 
                key.includes('session') ||
                key.includes('token')
            )) {
                keysToRemove.push(key);
            }
        }
        
        keysToRemove.forEach(key => {
            localStorage.removeItem(key);
            console.log('üóëÔ∏è Supprim√©:', key);
        });
        
        console.log('3Ô∏è‚É£ Nettoyage sessionStorage...');
        
        // Nettoyer sessionStorage aussi
        const sessionKeysToRemove = [];
        for (let i = 0; i < sessionStorage.length; i++) {
            const key = sessionStorage.key(i);
            if (key && (
                key.includes('supabase') || 
                key.includes('auth') || 
                key.includes('session') ||
                key.includes('token')
            )) {
                sessionKeysToRemove.push(key);
            }
        }
        
        sessionKeysToRemove.forEach(key => {
            sessionStorage.removeItem(key);
            console.log('üóëÔ∏è Supprim√© (session):', key);
        });
        
        console.log('4Ô∏è‚É£ Nettoyage cookies...');
        
        // Nettoyer les cookies li√©s √† l'auth
        document.cookie.split(";").forEach(function(c) { 
            document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
        });
        
        console.log('5Ô∏è‚É£ V√©rification finale...');
        
        if (window.supabase) {
            const { data: { session } } = await window.supabase.auth.getSession();
            if (session) {
                console.log('‚ö†Ô∏è Session encore pr√©sente:', session.user.email);
            } else {
                console.log('‚úÖ Aucune session active');
            }
        }
        
        console.log('6Ô∏è‚É£ Rechargement de la page...');
        setTimeout(() => {
            window.location.href = '/';
        }, 1000);
        
    } catch (err) {
        console.error('‚ùå Erreur dans forceLogoutAndClean:', err);
    }
}

// Ex√©cuter imm√©diatement
forceLogoutAndClean();
