// Script de diagnostic pour v√©rifier l'√©tat d'authentification dans le Header
// √Ä ex√©cuter dans la console du navigateur sur la page d'accueil

console.log('üîç Diagnostic de l\'authentification Header...');

// V√©rifier Supabase
if (typeof window.supabase === 'undefined') {
  console.error('‚ùå Supabase client non trouv√©');
} else {
  console.log('‚úÖ Supabase client disponible');
  
  // V√©rifier la session actuelle
  async function checkAuthState() {
    try {
      console.log('üîÑ V√©rification de la session...');
      
      const { data: { session }, error } = await window.supabase.auth.getSession();
      
      if (error) {
        console.error('‚ùå Erreur session:', error);
        return;
      }
      
      console.log('üìä √âtat de la session:', {
        session: session,
        user: session?.user,
        email: session?.user?.email,
        accessToken: session?.access_token ? 'Pr√©sent' : 'Absent',
        refreshToken: session?.refresh_token ? 'Pr√©sent' : 'Absent'
      });
      
      // V√©rifier le localStorage
      const localStorageKeys = Object.keys(localStorage).filter(key => 
        key.includes('supabase') || key.includes('auth')
      );
      
      console.log('üóÑÔ∏è Cl√©s localStorage li√©es √† l\'auth:', localStorageKeys);
      
      localStorageKeys.forEach(key => {
        try {
          const value = localStorage.getItem(key);
          console.log(`üìù ${key}:`, value ? JSON.parse(value) : value);
        } catch (e) {
          console.log(`üìù ${key}:`, localStorage.getItem(key));
        }
      });
      
      // V√©rifier les hooks React (si disponibles)
      console.log('üîç V√©rification des √©l√©ments DOM...');
      
      // Chercher l'avatar ou le bouton de connexion
      const avatar = document.querySelector('[data-testid="user-avatar"]') || 
                    document.querySelector('.rounded-full.bg-gradient-to-br.from-indigo-500');
      const loginButton = document.querySelector('.lucide-log-in');
      
      console.log('üéØ √âl√©ments trouv√©s:', {
        avatar: avatar ? 'Trouv√©' : 'Non trouv√©',
        loginButton: loginButton ? 'Trouv√©' : 'Non trouv√©'
      });
      
      if (avatar) {
        console.log('üë§ Avatar trouv√©:', avatar);
      }
      
      if (loginButton) {
        console.log('üîë Bouton de connexion trouv√©:', loginButton);
      }
      
      // Forcer un refresh de l'√©tat d'auth
      console.log('üîÑ Tentative de refresh de l\'√©tat d\'auth...');
      
      // √âcouter les changements d'√©tat d'auth
      window.supabase.auth.onAuthStateChange((event, session) => {
        console.log('üîî Changement d\'√©tat d\'auth:', {
          event: event,
          session: session,
          user: session?.user?.email
        });
      });
      
      // Recommandations
      console.log('\nüìã RECOMMANDATIONS:');
      
      if (session && session.user) {
        console.log('‚úÖ Vous √™tes connect√© comme:', session.user.email);
        if (loginButton) {
          console.log('‚ö†Ô∏è PROBL√àME: Bouton de connexion affich√© alors que vous √™tes connect√©');
          console.log('üîß Solution: Rechargez la page ou videz le cache');
        }
      } else {
        console.log('‚ùå Aucune session active d√©tect√©e');
        console.log('üîß Solution: Reconnectez-vous');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors du diagnostic:', error);
    }
  }
  
  // Fonction pour forcer le refresh
  function forceAuthRefresh() {
    console.log('üîÑ Rechargement forc√© de la page...');
    window.location.reload();
  }
  
  // Fonction pour nettoyer et reconnecter
  async function cleanAndReconnect() {
    console.log('üßπ Nettoyage et reconnexion...');
    
    // D√©connexion propre
    await window.supabase.auth.signOut();
    
    // Nettoyer le localStorage
    Object.keys(localStorage).forEach(key => {
      if (key.includes('supabase') || key.includes('auth')) {
        localStorage.removeItem(key);
      }
    });
    
    console.log('‚úÖ Nettoyage termin√©. Rechargez la page et reconnectez-vous.');
  }
  
  // Ex√©cuter le diagnostic
  checkAuthState();
  
  // Exposer les fonctions utiles
  window.forceAuthRefresh = forceAuthRefresh;
  window.cleanAndReconnect = cleanAndReconnect;
  
  console.log('\nüõ†Ô∏è FONCTIONS DISPONIBLES:');
  console.log('- forceAuthRefresh() : Recharge la page');
  console.log('- cleanAndReconnect() : Nettoie et pr√©pare une reconnexion');
}
