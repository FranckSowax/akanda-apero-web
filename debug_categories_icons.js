// Script de d√©bogage pour v√©rifier et corriger les ic√¥nes des cat√©gories
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç D√©bogage des ic√¥nes de cat√©gories...');

// V√©rifier si Supabase est disponible
if (typeof window.supabase === 'undefined') {
  console.error('‚ùå Supabase client non trouv√©');
  console.log('Essayez de recharger la page et r√©ex√©cuter ce script');
} else {
  console.log('‚úÖ Supabase client trouv√©');
  
  // Fonction pour mettre √† jour les ic√¥nes
  async function updateCategoryIcons() {
    console.log('üîÑ Mise √† jour des ic√¥nes...');
    
    const iconMapping = {
      'Formules': 'üéÅ',
      'Vins': 'üç∑',
      'Liqueurs': 'üç∏',
      'Spiritueux': 'üç∏',
      'Bi√®res': 'üç∫',
      'Champagnes': 'ü•Ç',
      'Ap√©ritifs & sucreries': 'üç´',
      'Ap√©ritifs': 'üç´',
      'Sodas & jus': 'ü•§',
      'Sodas': 'ü•§',
      'Boissons': 'ü•§',
      'D√©pannage': 'üõí',
      'Gla√ßons': 'üßä',
      'Sans Alcool': 'ü•§',
      'Cocktails': 'üçπ',
      'Digestifs': 'ü•É'
    };
    
    try {
      // R√©cup√©rer toutes les cat√©gories
      const { data: categories, error: fetchError } = await window.supabase
        .from('categories')
        .select('*');
        
      if (fetchError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des cat√©gories:', fetchError);
        return;
      }
      
      console.log('üìã Cat√©gories actuelles:', categories);
      
      // Mettre √† jour chaque cat√©gorie
      for (const category of categories) {
        const newIcon = iconMapping[category.name];
        if (newIcon && newIcon !== category.emoji) {
          console.log(`üîÑ Mise √† jour ${category.name}: ${category.emoji} ‚Üí ${newIcon}`);
          
          const { error: updateError } = await window.supabase
            .from('categories')
            .update({ emoji: newIcon })
            .eq('id', category.id);
            
          if (updateError) {
            console.error(`‚ùå Erreur mise √† jour ${category.name}:`, updateError);
          } else {
            console.log(`‚úÖ ${category.name} mis √† jour`);
          }
        }
      }
      
      console.log('üéâ Mise √† jour termin√©e!');
      console.log('üîÑ Rechargement de la page dans 2 secondes...');
      setTimeout(() => window.location.reload(), 2000);
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©rale:', error);
    }
  }
  
  // Fonction pour v√©rifier les ic√¥nes actuelles
  async function checkCurrentIcons() {
    try {
      const { data: categories, error } = await window.supabase
        .from('categories')
        .select('name, emoji')
        .order('name');
        
      if (error) {
        console.error('‚ùå Erreur:', error);
        return;
      }
      
      console.log('üìä Ic√¥nes actuelles:');
      categories.forEach(cat => {
        console.log(`${cat.emoji} ${cat.name}`);
      });
      
    } catch (error) {
      console.error('‚ùå Erreur:', error);
    }
  }
  
  // Ex√©cuter les fonctions
  console.log('1Ô∏è‚É£ V√©rification des ic√¥nes actuelles...');
  checkCurrentIcons().then(() => {
    console.log('\n2Ô∏è‚É£ Mise √† jour des ic√¥nes...');
    updateCategoryIcons();
  });
}
