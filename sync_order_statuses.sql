-- Script pour synchroniser les statuts de commandes avec les valeurs fran√ßaises
-- √Ä ex√©cuter dans Supabase SQL Editor

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîÑ SYNCHRONISATION DES STATUTS DE COMMANDES';
    RAISE NOTICE '==========================================';
    RAISE NOTICE '';
    
    -- 1. V√©rifier si les types enum existent d√©j√† avec les bonnes valeurs
    IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'order_status') THEN
        RAISE NOTICE '‚úÖ Type order_status existe d√©j√†';
        
        -- V√©rifier les valeurs
        IF EXISTS (
            SELECT 1 FROM pg_enum e 
            JOIN pg_type t ON e.enumtypid = t.oid 
            WHERE t.typname = 'order_status' 
            AND e.enumlabel = 'Nouvelle'
        ) THEN
            RAISE NOTICE '‚úÖ Valeurs fran√ßaises d√©j√† pr√©sentes dans order_status';
        ELSE
            RAISE NOTICE '‚ö†Ô∏è  Valeurs anglaises d√©tect√©es, mise √† jour n√©cessaire';
            
            -- Supprimer et recr√©er le type
            DROP TYPE IF EXISTS order_status CASCADE;
            CREATE TYPE order_status AS ENUM (
                'Nouvelle', 'Confirm√©e', 'En pr√©paration', 'Pr√™te', 
                'En livraison', 'Livr√©e', 'Annul√©e'
            );
            RAISE NOTICE '‚úÖ Type order_status mis √† jour avec valeurs fran√ßaises';
        END IF;
    ELSE
        -- Cr√©er le type s'il n'existe pas
        CREATE TYPE order_status AS ENUM (
            'Nouvelle', 'Confirm√©e', 'En pr√©paration', 'Pr√™te', 
            'En livraison', 'Livr√©e', 'Annul√©e'
        );
        RAISE NOTICE '‚úÖ Type order_status cr√©√© avec valeurs fran√ßaises';
    END IF;
    
    -- 2. M√™me chose pour payment_status
    IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'payment_status') THEN
        RAISE NOTICE '‚úÖ Type payment_status existe d√©j√†';
        
        IF EXISTS (
            SELECT 1 FROM pg_enum e 
            JOIN pg_type t ON e.enumtypid = t.oid 
            WHERE t.typname = 'payment_status' 
            AND e.enumlabel = 'En attente'
        ) THEN
            RAISE NOTICE '‚úÖ Valeurs fran√ßaises d√©j√† pr√©sentes dans payment_status';
        ELSE
            RAISE NOTICE '‚ö†Ô∏è  Valeurs anglaises d√©tect√©es, mise √† jour n√©cessaire';
            
            DROP TYPE IF EXISTS payment_status CASCADE;
            CREATE TYPE payment_status AS ENUM (
                'En attente', 'Pay√©', '√âchou√©', 'Rembours√©'
            );
            RAISE NOTICE '‚úÖ Type payment_status mis √† jour avec valeurs fran√ßaises';
        END IF;
    ELSE
        CREATE TYPE payment_status AS ENUM (
            'En attente', 'Pay√©', '√âchou√©', 'Rembours√©'
        );
        RAISE NOTICE '‚úÖ Type payment_status cr√©√© avec valeurs fran√ßaises';
    END IF;
    
    -- 3. Mettre √† jour la table orders si n√©cessaire
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'orders' AND column_name = 'status'
    ) THEN
        -- Modifier le type de la colonne status
        ALTER TABLE orders ALTER COLUMN status TYPE order_status USING 'Nouvelle'::order_status;
        RAISE NOTICE '‚úÖ Colonne orders.status mise √† jour';
    ELSE
        -- Ajouter la colonne si elle n'existe pas
        ALTER TABLE orders ADD COLUMN status order_status DEFAULT 'Nouvelle';
        RAISE NOTICE '‚úÖ Colonne orders.status ajout√©e';
    END IF;
    
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'orders' AND column_name = 'payment_status'
    ) THEN
        ALTER TABLE orders ALTER COLUMN payment_status TYPE payment_status USING 'En attente'::payment_status;
        RAISE NOTICE '‚úÖ Colonne orders.payment_status mise √† jour';
    ELSE
        ALTER TABLE orders ADD COLUMN payment_status payment_status DEFAULT 'En attente';
        RAISE NOTICE '‚úÖ Colonne orders.payment_status ajout√©e';
    END IF;
    
    -- 4. Mettre √† jour les commandes existantes avec des statuts par d√©faut
    UPDATE orders 
    SET status = 'Nouvelle'::order_status 
    WHERE status IS NULL;
    
    UPDATE orders 
    SET payment_status = 'En attente'::payment_status 
    WHERE payment_status IS NULL;
    
    RAISE NOTICE '‚úÖ Commandes existantes mises √† jour avec statuts par d√©faut';
    
    -- 5. V√©rification finale
    RAISE NOTICE '';
    RAISE NOTICE 'üîç V√âRIFICATION FINALE';
    RAISE NOTICE '=====================';
    
    -- Compter les commandes par statut
    DECLARE
        status_rec RECORD;
        payment_rec RECORD;
    BEGIN
        FOR status_rec IN 
            SELECT status::text as status_name, COUNT(*) as count_val 
            FROM orders 
            WHERE status IS NOT NULL
            GROUP BY status 
            ORDER BY status
        LOOP
            RAISE NOTICE 'üìä Statut "%" : % commandes', status_rec.status_name, status_rec.count_val;
        END LOOP;
        
        -- Compter les paiements par statut
        FOR payment_rec IN 
            SELECT payment_status::text as payment_name, COUNT(*) as count_val 
            FROM orders 
            WHERE payment_status IS NOT NULL
            GROUP BY payment_status 
            ORDER BY payment_status
        LOOP
            RAISE NOTICE 'üí≥ Paiement "%" : % commandes', payment_rec.payment_name, payment_rec.count_val;
        END LOOP;
    END;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ SYNCHRONISATION TERMIN√âE AVEC SUCC√àS !';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã Statuts disponibles :';
    RAISE NOTICE '   ‚Ä¢ Nouvelle (d√©faut)';
    RAISE NOTICE '   ‚Ä¢ Confirm√©e';
    RAISE NOTICE '   ‚Ä¢ En pr√©paration';
    RAISE NOTICE '   ‚Ä¢ Pr√™te';
    RAISE NOTICE '   ‚Ä¢ En livraison';
    RAISE NOTICE '   ‚Ä¢ Livr√©e';
    RAISE NOTICE '   ‚Ä¢ Annul√©e';
    RAISE NOTICE '';
    RAISE NOTICE 'üí≥ Statuts de paiement :';
    RAISE NOTICE '   ‚Ä¢ En attente (d√©faut)';
    RAISE NOTICE '   ‚Ä¢ Pay√©';
    RAISE NOTICE '   ‚Ä¢ √âchou√©';
    RAISE NOTICE '   ‚Ä¢ Rembours√©';
    RAISE NOTICE '';
    
END $$;
