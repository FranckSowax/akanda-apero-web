// Script pour tester le r√¥le admin apr√®s correction des politiques
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç Test du r√¥le admin...');

async function testAdminRole() {
    try {
        if (!window.supabase) {
            console.error('‚ùå Supabase non disponible');
            return;
        }
        
        // 1. V√©rifier la session actuelle
        console.log('üìä V√©rification de la session...');
        const { data: { session }, error: sessionError } = await window.supabase.auth.getSession();
        
        if (sessionError) {
            console.error('‚ùå Erreur session:', sessionError);
            return;
        }
        
        if (!session) {
            console.log('‚ö†Ô∏è Aucune session active. Connexion...');
            
            const { data, error } = await window.supabase.auth.signInWithPassword({
                email: 'ohmygab.marketplace@gmail.com',
                password: 'AkandaAdmin2024!'
            });
            
            if (error) {
                console.error('‚ùå Erreur de connexion:', error);
                return;
            }
            
            console.log('‚úÖ Connexion r√©ussie');
            session = data.session;
        }
        
        console.log('üë§ Utilisateur connect√©:', session.user.email);
        console.log('üÜî User ID:', session.user.id);
        
        // 2. Tester la requ√™te admin_profiles directement
        console.log('üîç Test de la requ√™te admin_profiles...');
        
        const { data: adminProfile, error: adminError } = await window.supabase
            .from('admin_profiles')
            .select('role, is_active')
            .eq('user_id', session.user.id)
            .eq('is_active', true)
            .single();
        
        if (adminError) {
            console.error('‚ùå Erreur admin_profiles:', adminError);
            console.log('Code d\'erreur:', adminError.code);
            console.log('Message:', adminError.message);
            console.log('D√©tails:', adminError.details);
            
            if (adminError.code === '42P17') {
                console.log('üîÑ Erreur de r√©cursion infinie d√©tect√©e !');
                console.log('‚û°Ô∏è Ex√©cutez le script fix_admin_policies.sql dans Supabase');
            }
        } else {
            console.log('‚úÖ Profil admin trouv√©:', adminProfile);
            
            if (adminProfile && adminProfile.role && adminProfile.is_active) {
                console.log('üéØ ‚úÖ Utilisateur est ADMIN !');
                console.log('R√¥le:', adminProfile.role);
                console.log('Actif:', adminProfile.is_active);
            } else {
                console.log('üéØ ‚ùå Utilisateur n\'est PAS admin');
                console.log('Profil:', adminProfile);
            }
        }
        
        // 3. Tester toutes les entr√©es admin_profiles
        console.log('üìã Liste de tous les profils admin...');
        const { data: allProfiles, error: allError } = await window.supabase
            .from('admin_profiles')
            .select('*');
        
        if (allError) {
            console.error('‚ùå Erreur liste profils:', allError);
        } else {
            console.log('üìä Tous les profils admin:', allProfiles);
            
            const userProfile = allProfiles.find(p => p.user_id === session.user.id);
            if (userProfile) {
                console.log('üë§ Profil de l\'utilisateur actuel:', userProfile);
            } else {
                console.log('‚ö†Ô∏è Aucun profil trouv√© pour l\'utilisateur actuel');
            }
        }
        
    } catch (err) {
        console.error('‚ùå Erreur dans testAdminRole:', err);
    }
}

async function createAdminProfile() {
    try {
        console.log('üîß Cr√©ation du profil admin...');
        
        const { data: { session } } = await window.supabase.auth.getSession();
        if (!session) {
            console.error('‚ùå Aucune session active');
            return;
        }
        
        const { data, error } = await window.supabase
            .from('admin_profiles')
            .upsert({
                user_id: session.user.id,
                role: 'admin',
                is_active: true,
                updated_at: new Date().toISOString()
            }, {
                onConflict: 'user_id'
            });
        
        if (error) {
            console.error('‚ùå Erreur cr√©ation profil:', error);
        } else {
            console.log('‚úÖ Profil admin cr√©√©/mis √† jour:', data);
        }
        
    } catch (err) {
        console.error('‚ùå Erreur dans createAdminProfile:', err);
    }
}

// Exposer les fonctions
window.testAdminRole = testAdminRole;
window.createAdminProfile = createAdminProfile;

console.log('üéØ Fonctions disponibles:');
console.log('- testAdminRole() : Tester le r√¥le admin');
console.log('- createAdminProfile() : Cr√©er/mettre √† jour le profil admin');

// Ex√©cuter automatiquement
console.log('üöÄ Test automatique...');
testAdminRole();
