// Script pour forcer le refresh de l'√©tat d'authentification
// √Ä ex√©cuter dans la console apr√®s connexion

console.log('üîÑ For√ßage du refresh d\'authentification...');

async function forceAuthRefresh() {
  try {
    console.log('1Ô∏è‚É£ V√©rification de la session actuelle...');
    
    // Cr√©er un client Supabase temporaire
    const supabaseUrl = 'https://mcdpzoisorbnhkjhljaj.supabase.co';
    const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1jZHB6b2lzb3JibmhramhsamFqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY2MjM3ODQsImV4cCI6MjA2MjE5OTc4NH0.S4omBGzpY3_8TEYJD2YBQwoyZg67nBOEJIUrZ4pZkcA';
    
    // Charger Supabase si n√©cessaire
    if (typeof window.supabase === 'undefined') {
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2';
      document.head.appendChild(script);
      
      await new Promise((resolve, reject) => {
        script.onload = resolve;
        script.onerror = reject;
      });
    }
    
    const client = window.supabase.createClient(supabaseUrl, supabaseAnonKey, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        storageKey: 'akanda-supabase-auth',
        detectSessionInUrl: true,
        flowType: 'pkce',
      }
    });
    
    // V√©rifier la session
    const { data: { session }, error } = await client.auth.getSession();
    
    if (error) {
      console.error('‚ùå Erreur session:', error);
      return;
    }
    
    console.log('üìä Session trouv√©e:', {
      isConnected: !!session,
      user: session?.user?.email,
      expiresAt: session?.expires_at
    });
    
    if (session && session.user) {
      console.log('‚úÖ Utilisateur connect√© d√©tect√©!');
      
      // 2. Forcer le re-render des composants React
      console.log('2Ô∏è‚É£ For√ßage du re-render React...');
      
      // D√©clencher des √©v√©nements pour forcer le refresh
      window.dispatchEvent(new Event('resize'));
      window.dispatchEvent(new Event('focus'));
      window.dispatchEvent(new CustomEvent('auth-refresh', {
        detail: { user: session.user, session: session }
      }));
      
      // 3. Manipuler le DOM directement si n√©cessaire
      setTimeout(() => {
        console.log('3Ô∏è‚É£ V√©rification du DOM...');
        
        const loginIcon = document.querySelector('.lucide-log-in');
        const avatar = document.querySelector('.rounded-full.bg-gradient-to-br.from-indigo-500');
        
        if (loginIcon && !avatar) {
          console.log('‚ö†Ô∏è DOM pas encore mis √† jour, rechargement n√©cessaire');
          console.log('üîÑ Rechargement automatique dans 2 secondes...');
          
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else if (avatar) {
          console.log('‚úÖ Avatar trouv√©! Probl√®me r√©solu.');
        }
      }, 1000);
      
    } else {
      console.log('‚ùå Aucune session active - Reconnexion n√©cessaire');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

// Fonction pour forcer un rechargement complet
function hardRefresh() {
  console.log('üîÑ Rechargement complet...');
  window.location.reload(true);
}

// Fonction pour nettoyer et forcer la reconnexion
async function cleanAndForceReconnect() {
  console.log('üßπ Nettoyage et reconnexion forc√©e...');
  
  // Nettoyer le localStorage
  Object.keys(localStorage).forEach(key => {
    if (key.includes('supabase') || key.includes('auth')) {
      localStorage.removeItem(key);
      console.log('üóëÔ∏è Supprim√©:', key);
    }
  });
  
  // Attendre et recharger
  setTimeout(() => {
    console.log('üîÑ Rechargement...');
    window.location.href = '/auth';
  }, 1000);
}

// Fonction pour injecter du CSS de debug
function debugAuthUI() {
  console.log('üé® Ajout de styles de debug...');
  
  const style = document.createElement('style');
  style.textContent = `
    .lucide-log-in {
      border: 3px solid red !important;
      background: rgba(255,0,0,0.1) !important;
    }
    .rounded-full.bg-gradient-to-br.from-indigo-500 {
      border: 3px solid green !important;
      box-shadow: 0 0 10px green !important;
    }
  `;
  document.head.appendChild(style);
  
  console.log('üé® Styles appliqu√©s - Ic√¥ne de connexion = rouge, Avatar = vert');
}

// Ex√©cuter le for√ßage
forceAuthRefresh();

// Exposer les fonctions
window.forceAuthRefresh = forceAuthRefresh;
window.hardRefresh = hardRefresh;
window.cleanAndForceReconnect = cleanAndForceReconnect;
window.debugAuthUI = debugAuthUI;

console.log('\nüõ†Ô∏è FONCTIONS DISPONIBLES:');
console.log('- forceAuthRefresh() : Force le refresh de l\'auth');
console.log('- hardRefresh() : Rechargement complet');
console.log('- cleanAndForceReconnect() : Nettoie et redirige vers /auth');
console.log('- debugAuthUI() : Ajoute des styles de debug');
