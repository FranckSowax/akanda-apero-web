import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { logError, logInfo, safeExecute } from '../../../utils/error-handler';

// Configuration Supabase - Initialisation lazy pour √©viter les erreurs de build
function getSupabaseClient() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  
  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error('Variables d\'environnement Supabase manquantes');
  }
  
  return createClient(supabaseUrl, supabaseAnonKey);
}

// Types pour les donn√©es de commande
interface OrderData {
  customerInfo: {
    email: string;
    first_name: string;
    last_name: string;
    phone: string;
  };
  deliveryInfo: {
    address: string;
    city?: string; // Champ envoy√© par le checkout
    district?: string;
    additionalInfo?: string;
    location: {
      lat: number;
      lng: number;
      hasLocation: boolean;
    };
    deliveryOption: string;
  };
  paymentInfo: {
    method: string;
    [key: string]: any;
  };
  items: Array<{
    id: string; // Support UUID
    name: string;
    price: number;
    quantity: number;
    imageUrl: string;
  }>;
  totalAmount: number;
  subtotal: number;
  deliveryCost: number;
  discount: number;
}

// Fonction de validation robuste des donn√©es de commande
function validateOrderData(orderData: any): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  // Validation des informations client
  if (!orderData.customerInfo) {
    errors.push('Informations client manquantes');
  } else {
    if (!orderData.customerInfo.email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(orderData.customerInfo.email)) {
      errors.push('Email client invalide ou manquant');
    }
    if (!orderData.customerInfo.first_name || orderData.customerInfo.first_name.trim().length < 2) {
      errors.push('Pr√©nom client invalide ou manquant');
    }
    if (!orderData.customerInfo.last_name || orderData.customerInfo.last_name.trim().length < 2) {
      errors.push('Nom client invalide ou manquant');
    }
    if (!orderData.customerInfo.phone || orderData.customerInfo.phone.trim().length < 8) {
      errors.push('T√©l√©phone client invalide ou manquant');
    }
  }
  
  // Validation des informations de livraison
  if (!orderData.deliveryInfo) {
    errors.push('Informations de livraison manquantes');
  } else {
    if (!orderData.deliveryInfo.address || orderData.deliveryInfo.address.trim().length < 5) {
      errors.push('Adresse de livraison invalide ou manquante');
    }
    if (!orderData.deliveryInfo.deliveryOption) {
      errors.push('Option de livraison manquante');
    }
  }
  
  // Validation des articles avec messages plus d√©taill√©s
  if (!orderData.items || !Array.isArray(orderData.items) || orderData.items.length === 0) {
    errors.push('Aucun article dans la commande');
  } else {
    orderData.items.forEach((item: any, index: number) => {
      // Validation stricte de l'ID (support UUID)
      if (item.id === undefined || item.id === null) {
        errors.push(`Article ${index + 1}: ID manquant (valeur re√ßue: ${item.id})`);
      } else if (typeof item.id !== 'string' || item.id.trim().length === 0) {
        errors.push(`Article ${index + 1}: ID invalide - doit √™tre une cha√Æne non vide (re√ßu: ${typeof item.id} ${item.id})`);
      }
      
      // Validation du nom
      if (!item.name || typeof item.name !== 'string' || item.name.trim().length === 0) {
        errors.push(`Article ${index + 1}: Nom manquant ou invalide (re√ßu: ${item.name})`);
      }
      
      // Validation du prix
      if (item.price === undefined || item.price === null) {
        errors.push(`Article ${index + 1}: Prix manquant (re√ßu: ${item.price})`);
      } else if (typeof item.price !== 'number' || isNaN(item.price)) {
        errors.push(`Article ${index + 1}: Prix invalide - doit √™tre un nombre (re√ßu: ${typeof item.price} ${item.price})`);
      } else if (item.price <= 0) {
        errors.push(`Article ${index + 1}: Prix invalide - doit √™tre positif (re√ßu: ${item.price})`);
      }
      
      // Validation de la quantit√©
      if (item.quantity === undefined || item.quantity === null) {
        errors.push(`Article ${index + 1}: Quantit√© manquante (re√ßu: ${item.quantity})`);
      } else if (typeof item.quantity !== 'number' || isNaN(item.quantity)) {
        errors.push(`Article ${index + 1}: Quantit√© invalide - doit √™tre un nombre (re√ßu: ${typeof item.quantity} ${item.quantity})`);
      } else if (!Number.isInteger(item.quantity) || item.quantity <= 0) {
        errors.push(`Article ${index + 1}: Quantit√© invalide - doit √™tre un entier positif (re√ßu: ${item.quantity})`);
      }
    });
  }
  
  // Validation des montants
  if (!orderData.totalAmount || typeof orderData.totalAmount !== 'number' || orderData.totalAmount <= 0) {
    errors.push('Montant total invalide');
  }
  if (typeof orderData.subtotal !== 'number' || orderData.subtotal < 0) {
    errors.push('Sous-total invalide');
  }
  if (typeof orderData.deliveryCost !== 'number' || orderData.deliveryCost < 0) {
    errors.push('Co√ªt de livraison invalide');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
}

// GET /api/orders - R√©cup√©rer les commandes depuis Supabase
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '20');
    const status = searchParams.get('status');
    const customerId = searchParams.get('customerId');
    const chauffeurId = searchParams.get('chauffeur_id');
    const startDate = searchParams.get('startDate');
    const endDate = searchParams.get('endDate');
    
    console.log('üîç GET /api/orders - Param√®tres:', { page, limit, status, customerId, chauffeurId, startDate, endDate });
    
    // Si on demande une commande sp√©cifique
    const orderId = searchParams.get('id');
    
    if (orderId) {
      // R√©cup√©rer une commande sp√©cifique
      const supabase = getSupabaseClient();
      const { data: order, error: orderError } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();
        
      if (orderError) {
        console.error('Erreur lors de la r√©cup√©ration de la commande:', orderError);
        return NextResponse.json(
          { error: 'Commande non trouv√©e', details: orderError.message },
          { status: 404 }
        );
      }
      
      return NextResponse.json(order);
    }
    
    // Construire la requ√™te pour toutes les commandes
    const supabase = getSupabaseClient();
    let query = supabase
      .from('orders')
      .select('*');
    
    // Appliquer les filtres
    if (status) {
      query = query.eq('status', status);
    }
    
    if (customerId) {
      query = query.eq('customer_id', customerId);
    }
    
    if (chauffeurId) {
      query = query.eq('delivery_person_id', chauffeurId);
    }
    
    if (startDate) {
      query = query.gte('created_at', startDate);
    }
    
    if (endDate) {
      query = query.lte('created_at', endDate);
    }
    
    // Appliquer la pagination et le tri
    const startIndex = (page - 1) * limit;
    query = query
      .order('created_at', { ascending: false })
      .range(startIndex, startIndex + limit - 1);
    
    // Ex√©cuter la requ√™te
    const { data: orders, error } = await query;
    
    if (error) {
      console.error('Erreur r√©cup√©ration commandes:', error);
      return NextResponse.json(
        { error: 'Erreur lors de la r√©cup√©ration des commandes', details: error.message },
        { status: 500 }
      );
    }
    
    console.log(`${orders?.length || 0} commandes r√©cup√©r√©es`);
    
    return NextResponse.json({
      orders: orders || [],
      total: orders?.length || 0
    });
    
  } catch (error) {
    console.error('‚ùå Erreur GET /api/orders:', error);
    return NextResponse.json(
      { error: 'Erreur serveur lors de la r√©cup√©ration des commandes' },
      { status: 500 }
    );
  }
}

// POST /api/orders - Cr√©er une nouvelle commande dans Supabase
export async function POST(request: NextRequest) {
  const result = await safeExecute(async () => {
    logInfo('POST /api/orders - D√©but de cr√©ation de commande');
    
    // R√©cup√©ration et validation des donn√©es
    let orderData: OrderData;
    try {
      orderData = await request.json();
      logInfo(`Donn√©es de commande re√ßues - Email: ${orderData.customerInfo?.email}, Articles: ${orderData.items?.length}, Total: ${orderData.totalAmount}`);
    } catch (error) {
      logError(error, 'parsing_json_order_data');
      return NextResponse.json({
        success: false,
        error: 'Format de donn√©es invalide'
      }, { status: 400 });
    }
    
    // Validation robuste des donn√©es
    const validation = validateOrderData(orderData);
    if (!validation.isValid) {
      logError(`Validation des donn√©es de commande √©chou√©e: ${validation.errors.join(', ')}`, 'order_validation');
      return NextResponse.json({
        success: false,
        error: 'Donn√©es de commande invalides',
        details: validation.errors
      }, { status: 400 });
    }
    
    // V√©rifier et corriger les coordonn√©es GPS
    let gpsLat = orderData.deliveryInfo.location?.lat;
    let gpsLng = orderData.deliveryInfo.location?.lng;
    
    // Si pas de coordonn√©es GPS valides, utiliser les coordonn√©es par d√©faut de Libreville
    if (!gpsLat || !gpsLng || gpsLat === 0 || gpsLng === 0) {
      console.log('‚ö†Ô∏è Coordonn√©es GPS manquantes, utilisation des coordonn√©es par d√©faut de Libreville');
      gpsLat = 0.4162; // Latitude de Libreville
      gpsLng = 9.4167; // Longitude de Libreville
    }
    
    console.log('üìç Coordonn√©es GPS utilis√©es:', { lat: gpsLat, lng: gpsLng });
    
    // 1. Cr√©er ou mettre √† jour le client avec les donn√©es du formulaire
    const supabase = getSupabaseClient();
    const { data: existingCustomer } = await supabase
      .from('customers')
      .select('id')
      .eq('email', orderData.customerInfo.email)
      .single();
    
    let customerId = existingCustomer?.id;
    
    if (!customerId) {
      // Cr√©er un nouveau client
      const { data: newCustomer, error: customerError } = await supabase
        .from('customers')
        .insert({
          email: orderData.customerInfo.email,
          first_name: orderData.customerInfo.first_name,
          last_name: orderData.customerInfo.last_name,
          phone: orderData.customerInfo.phone,
          full_name: `${orderData.customerInfo.first_name} ${orderData.customerInfo.last_name}`.trim()
        })
        .select('id')
        .single();
      
      if (customerError) {
        console.error('‚ùå Erreur cr√©ation client:', customerError);
        return NextResponse.json(
          { error: 'Erreur lors de la cr√©ation du client', details: customerError.message },
          { status: 500 }
        );
      }
      
      customerId = newCustomer.id;
      console.log('‚úÖ Nouveau client cr√©√© avec ID:', customerId);
    } else {
      // Mettre √† jour le client existant avec les donn√©es du formulaire
      const { error: updateError } = await supabase
        .from('customers')
        .update({
          first_name: orderData.customerInfo.first_name,
          last_name: orderData.customerInfo.last_name,
          phone: orderData.customerInfo.phone,
          full_name: `${orderData.customerInfo.first_name} ${orderData.customerInfo.last_name}`.trim()
        })
        .eq('id', customerId);
      
      if (updateError) {
        console.error('‚ùå Erreur mise √† jour client:', updateError);
        return NextResponse.json(
          { error: 'Erreur lors de la mise √† jour du client', details: updateError.message },
          { status: 500 }
        );
      }
      
      console.log('‚úÖ Client existant mis √† jour avec ID:', customerId, {
        first_name: orderData.customerInfo.first_name,
        last_name: orderData.customerInfo.last_name,
        phone: orderData.customerInfo.phone
      });
    }
    
    // 2. Cr√©er la commande avec coordonn√©es GPS
    const { data: newOrder, error: orderError } = await supabase
      .from('orders')
      .insert({
        customer_id: customerId,
        total_amount: orderData.totalAmount,
        subtotal: orderData.subtotal,
        delivery_cost: orderData.deliveryCost,
        discount: orderData.discount || 0,
        status: 'Nouvelle',
        payment_status: 'En attente',
        payment_method: orderData.paymentInfo.method,
        delivery_address: orderData.deliveryInfo.address,
        delivery_district: orderData.deliveryInfo.district,
        delivery_notes: orderData.deliveryInfo.additionalInfo,
        delivery_option: orderData.deliveryInfo.deliveryOption,
        gps_latitude: gpsLat,
        gps_longitude: gpsLng
      })
      .select('id, order_number')
      .single();
    
    if (orderError) {
      console.error('‚ùå Erreur cr√©ation commande:', orderError);
      return NextResponse.json(
        { error: 'Erreur lors de la cr√©ation de la commande', details: orderError.message },
        { status: 500 }
      );
    }
    
    console.log('‚úÖ Commande cr√©√©e avec ID:', newOrder.id, 'Num√©ro:', newOrder.order_number);
    
    // 3. Ajouter les articles de la commande
    console.log('üìù Pr√©paration des articles:', orderData.items.length, 'articles');
    
    // Fonction pour valider un UUID
    const validItems = [];
    const invalidItems = [];
    
    for (let index = 0; index < orderData.items.length; index++) {
      const item = orderData.items[index];
      const productId = typeof item.id === 'string' ? item.id : String(item.id);
      
      console.log(`üîç V√©rification article ${index + 1}:`, {
        id: productId,
        name: item.name,
        quantity: item.quantity,
        price: item.price
      });
      
      // V√©rifier dans la vue unifi√©e qui combine tous les types de produits
      let { data: product, error } = await supabase
        .from('products_unified')
        .select('id, name, source_table')
        .eq('id', productId)
        .single();
      
      // Si pas trouv√© dans products_unified, v√©rifier dans ready_cocktails
      if (error || !product) {
        console.log(`üîç Produit non trouv√© dans products_unified, v√©rification dans ready_cocktails...`);
        const { data: readyCocktail, error: cocktailError } = await supabase
          .from('ready_cocktails')
          .select('id, name')
          .eq('id', productId)
          .eq('is_active', true)
          .single();
        
        if (readyCocktail && !cocktailError) {
          console.log(`‚úÖ Cocktail pr√™t trouv√©:`, { id: productId, name: readyCocktail.name });
          product = { 
            id: readyCocktail.id, 
            name: readyCocktail.name, 
            source_table: 'ready_cocktails' 
          };
        } else {
          // Si toujours pas trouv√©, v√©rifier dans cocktails_maison
          console.log(`üîç Produit non trouv√© dans ready_cocktails, v√©rification dans cocktails_maison...`);
          const { data: cocktailMaison, error: maisonError } = await supabase
            .from('cocktails_maison')
            .select('id, name')
            .eq('id', productId)
            .eq('is_active', true)
            .single();
          
          if (cocktailMaison && !maisonError) {
            console.log(`‚úÖ Kit cocktail trouv√©:`, { id: productId, name: cocktailMaison.name });
            product = { 
              id: cocktailMaison.id, 
              name: cocktailMaison.name, 
              source_table: 'cocktails_maison' 
            };
          }
        }
      }
      
      if (!product) {
        console.warn(`‚ö†Ô∏è Article invalide - non trouv√© dans aucune table:`, { 
          index: index + 1, 
          id: productId, 
          name: item.name,
          originalError: error?.message 
        });
        invalidItems.push({ index: index + 1, id: productId, name: item.name });
        continue;
      }
      
      // D√©terminer le type de produit
      const isReadyCocktail = product.source_table === 'ready_cocktails';
      const isCocktailMaison = product.source_table === 'cocktails_maison';
      const isRegularProduct = product.source_table === 'product' || !product.source_table;
      
      console.log(`‚úÖ Produit trouv√©:`, { 
        id: productId, 
        name: item.name, 
        source: product.source_table,
        isReadyCocktail: isReadyCocktail,
        isCocktailMaison: isCocktailMaison,
        isRegularProduct: isRegularProduct
      });
      
      // Ajouter l'article valide avec le bon ID selon le type
      const orderItem: any = {
        order_id: newOrder.id,
        product_name: item.name,
        quantity: item.quantity,
        unit_price: item.price,
        subtotal: item.price * item.quantity
      };

      // Assigner le bon champ selon le type de produit
      if (isRegularProduct) {
        orderItem.product_id = productId;
      } else if (isReadyCocktail) {
        // Pour les cocktails pr√™ts, on utilise un champ sp√©cifique ou on les traite comme des produits sp√©ciaux
        // Temporairement, on va les traiter comme des produits normaux pour √©viter l'erreur de contrainte
        orderItem.product_id = null; // Pas de product_id car ce n'est pas dans la table products
        orderItem.ready_cocktail_id = productId; // Utiliser un champ d√©di√© aux cocktails pr√™ts
        orderItem.product_type = 'ready_cocktail';
      } else if (isCocktailMaison) {
        orderItem.product_id = null;
        orderItem.cocktail_maison_id = productId;
        orderItem.product_type = 'cocktail_maison';
      }

      validItems.push(orderItem);
    }
    
    // V√©rifier s'il y a des articles invalides
    if (invalidItems.length > 0) {
      console.error('‚ùå Articles avec IDs invalides d√©tect√©s:', invalidItems);
      // Supprimer la commande cr√©√©e
      await supabase.from('orders').delete().eq('id', newOrder.id);
      return NextResponse.json(
        { 
          error: 'Articles invalides d√©tect√©s', 
          details: `${invalidItems.length} article(s) avec des IDs invalides`,
          invalidItems: invalidItems
        },
        { status: 400 }
      );
    }
    
    // V√©rifier qu'il reste des articles valides
    if (validItems.length === 0) {
      console.error('‚ùå Aucun article valide dans la commande');
      await supabase.from('orders').delete().eq('id', newOrder.id);
      return NextResponse.json(
        { error: 'Aucun article valide dans la commande' },
        { status: 400 }
      );
    }
    
    const orderItems = validItems;
    
    console.log('üì¶ Articles pr√™ts pour insertion:', orderItems);
    console.log('üîç IDs des produits √† ins√©rer:', orderItems.map(item => item.product_id));
    
    const { error: itemsError } = await supabase
      .from('order_items')
      .insert(orderItems);
    
    if (itemsError) {
      console.error('‚ùå Erreur ajout articles:', itemsError);
      // Supprimer la commande si les articles n'ont pas pu √™tre ajout√©s
      await supabase.from('orders').delete().eq('id', newOrder.id);
      return NextResponse.json(
        { error: 'Erreur lors de l\'ajout des articles', details: itemsError.message },
        { status: 500 }
      );
    }
    
    console.log(`‚úÖ ${orderItems.length} articles ajout√©s √† la commande`);
    
    // 4. R√©cup√©rer la commande compl√®te avec les liens de navigation
    const { data: completeOrder, error: fetchError } = await supabase
      .from('orders_complete')
      .select('*')
      .eq('id', newOrder.id)
      .single();
    
    if (fetchError) {
      console.error('‚ùå Erreur r√©cup√©ration commande compl√®te:', fetchError);
    }
    
    logInfo(`Commande ${newOrder.order_number} cr√©√©e avec succ√®s`);
    
    return NextResponse.json({
      success: true,
      order: completeOrder || {
        id: newOrder.id,
        order_number: newOrder.order_number,
        status: 'Nouvelle',
        total_amount: orderData.totalAmount
      },
      message: `Commande ${newOrder.order_number} cr√©√©e avec succ√®s avec coordonn√©es GPS`
    }, { status: 201 });
    
  }, 'post_orders_api', NextResponse.json({
    success: false,
    error: 'Erreur serveur lors de la cr√©ation de la commande'
  }, { status: 500 }));
  
  return result || NextResponse.json({
    success: false,
    error: 'Erreur serveur lors de la cr√©ation de la commande'
  }, { status: 500 });
}

// PATCH /api/orders - Mettre √† jour une commande
export async function PATCH(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const orderId = searchParams.get('id');
    const body = await request.json();
    
    console.log('üîç PATCH /api/orders - Debug:', {
      url: request.url,
      orderId,
      body,
      searchParams: Object.fromEntries(searchParams.entries())
    });
    
    if (!orderId) {
      console.error('‚ùå ID de commande manquant');
      return NextResponse.json(
        { error: 'ID de commande requis' },
        { status: 400 }
      );
    }
    
    console.log(`üîÑ PATCH /api/orders - Mise √† jour commande ${orderId}:`, body);
    
    const supabase = getSupabaseClient();
    
    // R√©cup√©rer d'abord la commande pour avoir le statut pr√©c√©dent
    const { data: currentOrder, error: fetchError } = await supabase
      .from('orders')
      .select('*')
      .eq('id', orderId)
      .single();
    
    if (fetchError || !currentOrder) {
      console.error('‚ùå Erreur r√©cup√©ration commande:', fetchError);
      return NextResponse.json(
        { error: 'Commande non trouv√©e', details: fetchError?.message },
        { status: 404 }
      );
    }
    
    // R√©cup√©rer les infos du client s√©par√©ment
    console.log('üîç R√©cup√©ration infos client pour customer_id:', currentOrder.customer_id);
    let customerWhatsapp = null;
    let customerName = null;
    if (currentOrder.customer_id) {
      const { data: customer, error: customerError } = await supabase
        .from('customers')
        .select('phone, first_name, last_name')
        .eq('id', currentOrder.customer_id)
        .single();
      
      console.log('üìä R√©sultat requ√™te customer:', { customer, error: customerError });
      
      if (customer) {
        // Supprimer le + au d√©but du num√©ro si pr√©sent
        customerWhatsapp = customer.phone ? customer.phone.replace(/^\+/, '') : null;
        customerName = `${customer.first_name || ''} ${customer.last_name || ''}`.trim() || 'Client';
        console.log('üì± Infos client r√©cup√©r√©es:', { 
          phoneOriginal: customer.phone,
          phoneFormatted: customerWhatsapp, 
          name: customerName 
        });
      } else {
        console.log('‚ö†Ô∏è Aucune info client trouv√©e pour customer_id:', currentOrder.customer_id);
      }
    } else {
      console.log('‚ö†Ô∏è Pas de customer_id dans la commande');
    }
    
    const oldStatus = currentOrder.status;
    const newStatus = body.status || oldStatus;
    
    // Mettre √† jour la commande
    const { data: updatedOrder, error } = await supabase
      .from('orders')
      .update({
        status: body.status,
        payment_status: body.payment_status,
        delivery_person_id: body.delivery_person_id,
        delivery_notes: body.delivery_notes,
        updated_at: new Date().toISOString()
      })
      .eq('id', orderId)
      .select('*')
      .single();
    
    if (error) {
      console.error('‚ùå Erreur mise √† jour commande:', error);
      return NextResponse.json(
        { error: 'Erreur lors de la mise √† jour', details: error.message },
        { status: 500 }
      );
    }
    
    console.log('‚úÖ Commande mise √† jour:', updatedOrder.order_number);
    
    // Si le statut a chang√© et qu'on a un num√©ro WhatsApp, envoyer une notification
    console.log('üîç V√©rification conditions notification WhatsApp:', {
      hasBodyStatus: !!body.status,
      oldStatus,
      newStatus,
      statusChanged: oldStatus !== newStatus,
      hasCustomerWhatsapp: !!customerWhatsapp,
      customerWhatsapp,
      shouldSendNotification: body.status && oldStatus !== newStatus && customerWhatsapp
    });
    
    if (body.status && oldStatus !== newStatus && customerWhatsapp) {
      console.log('üì± Envoi notification WhatsApp pour changement de statut:', {
        oldStatus,
        newStatus,
        phone: customerWhatsapp
      });
      
      try {
        // Appeler l'API WhatsApp pour envoyer la notification
        const notificationResponse = await fetch(`${request.nextUrl.origin}/api/whatsapp/send`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            orderId: orderId,
            phone: customerWhatsapp,
            status: newStatus,
            orderNumber: updatedOrder.order_number,
            customerName: customerName || 'Client',
            totalAmount: updatedOrder.total_amount,
            deliveryDate: updatedOrder.delivery_date,
            deliveryTime: updatedOrder.delivery_time
          })
        });
        
        if (!notificationResponse.ok) {
          console.error('‚ùå Erreur envoi notification WhatsApp:', await notificationResponse.text());
        } else {
          console.log('‚úÖ Notification WhatsApp envoy√©e avec succ√®s');
        }
      } catch (notifError) {
        console.error('‚ùå Erreur lors de l\'envoi de la notification WhatsApp:', notifError);
        // On ne bloque pas la mise √† jour m√™me si la notification √©choue
      }
    }
    
    return NextResponse.json({
      success: true,
      order: updatedOrder
    });
    
  } catch (error) {
    console.error('‚ùå Erreur PATCH /api/orders:', error);
    return NextResponse.json(
      { error: 'Erreur serveur lors de la mise √† jour' },
      { status: 500 }
    );
  }
}
