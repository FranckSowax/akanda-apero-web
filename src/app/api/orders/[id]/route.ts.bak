import { NextRequest, NextResponse } from 'next/server';
import { Order } from '../../../../lib/types';

// Base de données fictive pour les commandes (dupliquée pour la démo)
let orders: Order[] = [
  {
    id: "ORD-2025050601",
    customerId: 1,
    customerName: "Michel Dupont",
    customerPhone: "+225 07 01 02 03 04",
    customerEmail: "michel.dupont@email.com",
    items: [
      { productId: 1, name: "Pack The Party Mix", quantity: 2, price: 15000, subtotal: 30000 },
      { productId: 3, name: "Cocktail DIY Kit", quantity: 1, price: 28000, subtotal: 28000 }
    ],
    totalAmount: 58000,
    status: 'Prête',
    paymentStatus: 'Payée',
    paymentMethod: 'Mobile Money',
    address: "Cocody, Rue des Jardins, Abidjan",
    date: "2025-05-06T10:30:00.000Z",
    deliveryPersonId: 1,
    createdAt: "2025-05-06T09:15:00.000Z",
    updatedAt: "2025-05-06T10:25:00.000Z"
  },
  // Autres commandes...
];

// GET /api/orders/:id
export async function GET(
  request: NextRequest,
  context: { params: { id: string  } }
) {
  const id = context.params.id;
  
  // Trouver la commande correspondant à l'ID
  const order = orders.find(o => o.id === id);
  
  if (!order) {
    return NextResponse.json({
      success: false,
      error: 'Commande non trouvée'
    }, { status: 404 });
  }
  
  return NextResponse.json({
    success: true,
    data: order
  });
}

// PUT /api/orders/:id
export async function PUT(
  request: NextRequest,
  context: { params: { id: string  } }
) {
  try {
    const id = context.params.id;
    const body = await request.json();
    
    // Trouver l'index de la commande
    const orderIndex = orders.findIndex(o => o.id === id);
    
    if (orderIndex === -1) {
      return NextResponse.json({
        success: false,
        error: 'Commande non trouvée'
      }, { status: 404 });
    }
    
    // Mettre à jour la commande
    const updatedOrder = {
      ...orders[orderIndex],
      ...body,
      updatedAt: new Date().toISOString()
    };
    
    // Si les articles sont modifiés, recalculer le montant total
    if (body.items) {
      updatedOrder.totalAmount = body.items.reduce((total: number, item: any) => {
        return total + (item.price * item.quantity);
      }, 0);
    }
    
    orders[orderIndex] = updatedOrder;
    
    return NextResponse.json({
      success: true,
      data: updatedOrder,
      message: 'Commande mise à jour avec succès'
    });
  } catch (error) {
    console.error('Erreur lors de la mise à jour de la commande:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur lors de la mise à jour de la commande'
    }, { status: 500 });
  }
}

// PATCH /api/orders/:id/status - Mettre à jour le statut de la commande
export async function PATCH(
  request: NextRequest,
  context: { params: { id: string  } }
) {
  try {
    const id = context.params.id;
    const body = await request.json();
    
    if (!body.status && !body.paymentStatus) {
      return NextResponse.json({
        success: false,
        error: 'Veuillez fournir un statut à mettre à jour'
      }, { status: 400 });
    }
    
    // Trouver l'index de la commande
    const orderIndex = orders.findIndex(o => o.id === id);
    
    if (orderIndex === -1) {
      return NextResponse.json({
        success: false,
        error: 'Commande non trouvée'
      }, { status: 404 });
    }
    
    // Mettre à jour le statut
    const updatedOrder = {
      ...orders[orderIndex],
      updatedAt: new Date().toISOString()
    };
    
    if (body.status) {
      updatedOrder.status = body.status;
    }
    
    if (body.paymentStatus) {
      updatedOrder.paymentStatus = body.paymentStatus;
    }
    
    orders[orderIndex] = updatedOrder;
    
    return NextResponse.json({
      success: true,
      data: updatedOrder,
      message: 'Statut de la commande mis à jour avec succès'
    });
  } catch (error) {
    console.error('Erreur lors de la mise à jour du statut de la commande:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur lors de la mise à jour du statut de la commande'
    }, { status: 500 });
  }
}
