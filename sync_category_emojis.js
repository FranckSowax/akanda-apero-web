// Script pour synchroniser les emojis des cat√©gories existantes
// √Ä ex√©cuter dans la console du navigateur sur la page admin/categories

console.log('üîÑ SYNCHRONISATION DES EMOJIS DE CAT√âGORIES');
console.log('============================================');

// Mapping des emojis (identique √† celui de utils/categoryEmojis.ts)
const emojiMap = {
  'whisky': 'ü•É',
  'rhum': 'üçπ',
  'tequila': 'üåµ',
  'vodka': 'üßä',
  'gin': 'üç∏',
  'cognac': 'ü•É',
  'armagnac': 'ü•É',
  'brandy': 'ü•É',
  'liqueurs': 'üç∑',
  'vins': 'üç∑',
  'vin rouge': 'üç∑',
  'vin blanc': 'üç∑',
  'vin ros√©': 'üç∑',
  'champagnes': 'ü•Ç',
  'champagne': 'ü•Ç',
  'bi√®res': 'üç∫',
  'bi√®re': 'üç∫',
  'cocktails': 'üçπ',
  'cocktail': 'üçπ',
  'spiritueux': 'üçæ',
  'ap√©ritifs': 'üç´',
  'ap√©ritif': 'üç´',
  'sodas': 'ü•§',
  'soda': 'ü•§',
  'jus': 'ü•§',
  'sans alcool': 'ü•õ',
  'formules': 'üéÅ',
  'formule': 'üéÅ',
  'd√©pannage': 'üõí',
  'gla√ßons': 'üßä',
  'gla√ßon': 'üßä',
  'liqueurs douces': 'üçØ',
  'liqueur douce': 'üçØ',
  'ap√©ritifs naturels': 'üåø',
  'ap√©ritif naturel': 'üåø',
  'pastis': 'üåø',
  'absinthe': 'üåø',
  'porto': 'üç∑',
  'sherry': 'üç∑',
  'vermouth': 'üç∏',
  'sake': 'üç∂',
  'mezcal': 'üåµ',
  'cacha√ßa': 'üçπ',
  'bourbon': 'ü•É',
  'scotch': 'ü•É',
  'irish': 'ü•É',
  'rye': 'ü•É',
  'single malt': 'ü•É',
  'blended': 'ü•É'
};

// Fonction pour obtenir l'emoji appropri√©
const getCategoryEmoji = (categoryName, fallbackIcon) => {
  const normalizedName = categoryName.toLowerCase().trim();
  
  // Recherche exacte d'abord
  if (emojiMap[normalizedName]) {
    return emojiMap[normalizedName];
  }
  
  // Recherche partielle pour les noms compos√©s
  for (const [key, emoji] of Object.entries(emojiMap)) {
    if (normalizedName.includes(key) || key.includes(normalizedName)) {
      return emoji;
    }
  }
  
  // Fallback vers l'ic√¥ne existante ou emoji par d√©faut
  return fallbackIcon || 'üè∑Ô∏è';
};

// Fonction pour analyser les cat√©gories actuelles
const analyzeCategoriesEmojis = () => {
  console.log('\nüìä ANALYSE DES CAT√âGORIES ACTUELLES:');
  
  const categoryRows = document.querySelectorAll('tbody tr');
  const categoriesToUpdate = [];
  
  categoryRows.forEach((row, index) => {
    const nameCell = row.querySelector('td:nth-child(2) .text-sm.font-medium');
    const emojiCell = row.querySelector('td:nth-child(1) .flex-shrink-0');
    
    if (nameCell && emojiCell) {
      const name = nameCell.textContent.trim();
      const currentEmoji = emojiCell.textContent.trim();
      const recommendedEmoji = getCategoryEmoji(name, currentEmoji);
      
      console.log(`${index + 1}. ${name}:`);
      console.log(`   Emoji actuel: ${currentEmoji}`);
      console.log(`   Emoji recommand√©: ${recommendedEmoji}`);
      
      if (currentEmoji !== recommendedEmoji) {
        console.log(`   ‚ö†Ô∏è MISE √Ä JOUR N√âCESSAIRE`);
        categoriesToUpdate.push({
          name,
          currentEmoji,
          recommendedEmoji,
          row
        });
      } else {
        console.log(`   ‚úÖ Correct`);
      }
      console.log('');
    }
  });
  
  return categoriesToUpdate;
};

// Fonction pour mettre en √©vidence les cat√©gories √† corriger
const highlightCategoriesToUpdate = (categoriesToUpdate) => {
  console.log(`\nüéØ ${categoriesToUpdate.length} CAT√âGORIES √Ä METTRE √Ä JOUR:`);
  
  categoriesToUpdate.forEach((category, index) => {
    console.log(`${index + 1}. ${category.name}: ${category.currentEmoji} ‚Üí ${category.recommendedEmoji}`);
    
    // Mettre en √©vidence la ligne
    category.row.style.backgroundColor = '#fef3c7';
    category.row.style.border = '2px solid #f59e0b';
    
    // Mettre en √©vidence le bouton d'√©dition
    const editButton = category.row.querySelector('button svg.lucide-edit');
    if (editButton) {
      const button = editButton.closest('button');
      if (button) {
        button.style.backgroundColor = '#10b981';
        button.style.color = 'white';
        button.style.transform = 'scale(1.1)';
      }
    }
  });
};

// Fonction pour g√©n√©rer les instructions de mise √† jour
const generateUpdateInstructions = (categoriesToUpdate) => {
  console.log('\nüìã INSTRUCTIONS DE MISE √Ä JOUR:');
  console.log('Pour chaque cat√©gorie mise en √©vidence:');
  console.log('1. Cliquez sur le bouton "Modifier" (vert, avec ic√¥ne crayon)');
  console.log('2. Dans le formulaire, s√©lectionnez le nouvel emoji recommand√©');
  console.log('3. Cliquez sur "Sauvegarder"');
  console.log('4. V√©rifiez que l\'emoji s\'affiche correctement');
  console.log('');
  
  categoriesToUpdate.forEach((category, index) => {
    console.log(`${index + 1}. ${category.name}:`);
    console.log(`   S√©lectionner: ${category.recommendedEmoji}`);
  });
};

// Fonction pour tester apr√®s mise √† jour
const testAfterUpdate = () => {
  console.log('\nüß™ TEST APR√àS MISE √Ä JOUR:');
  console.log('1. Rechargez la page admin (Ctrl+F5 ou Cmd+R)');
  console.log('2. V√©rifiez que tous les emojis sont corrects');
  console.log('3. Allez sur /products pour v√©rifier l\'affichage public');
  console.log('4. Testez les boutons de cat√©gories');
};

// Ex√©cution du script principal
const runSync = () => {
  console.log('üöÄ Lancement de la synchronisation...');
  
  const categoriesToUpdate = analyzeCategoriesEmojis();
  
  if (categoriesToUpdate.length === 0) {
    console.log('‚úÖ Toutes les cat√©gories ont d√©j√† les bons emojis !');
    return;
  }
  
  highlightCategoriesToUpdate(categoriesToUpdate);
  generateUpdateInstructions(categoriesToUpdate);
  testAfterUpdate();
  
  console.log('\n‚úÖ SYNCHRONISATION TERMIN√âE');
  console.log(`${categoriesToUpdate.length} cat√©gories n√©cessitent une mise √† jour manuelle.`);
};

// Fonction utilitaire pour recharger et relancer
window.rerunSync = () => {
  console.clear();
  location.reload();
  setTimeout(runSync, 2000);
};

// Fonction utilitaire pour nettoyer les mises en √©vidence
window.clearHighlights = () => {
  const rows = document.querySelectorAll('tbody tr');
  rows.forEach(row => {
    row.style.backgroundColor = '';
    row.style.border = '';
    
    const buttons = row.querySelectorAll('button');
    buttons.forEach(button => {
      button.style.backgroundColor = '';
      button.style.color = '';
      button.style.transform = '';
    });
  });
  console.log('üßπ Mises en √©vidence supprim√©es');
};

// Lancer le script
runSync();

console.log('\nüõ†Ô∏è COMMANDES UTILES:');
console.log('- rerunSync() : Recharger et relancer la synchronisation');
console.log('- clearHighlights() : Supprimer les mises en √©vidence');
console.log('- runSync() : Relancer l\'analyse sans recharger');
