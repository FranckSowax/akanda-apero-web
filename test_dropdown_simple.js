/**
 * Test simple pour v√©rifier l'ouverture des dropdowns
 * √Ä ex√©cuter dans la console du navigateur sur /admin/orders
 */

console.log('üîß TEST SIMPLE DROPDOWN - D√âMARRAGE');
console.log('==================================');

const log = (message, type = 'info') => {
  const colors = {
    info: 'color: #2196F3',
    success: 'color: #4CAF50; font-weight: bold',
    error: 'color: #F44336; font-weight: bold',
    warning: 'color: #FF9800; font-weight: bold'
  };
  console.log(`%c${message}`, colors[type]);
};

const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function testDropdownSimple() {
  try {
    // √âtape 1: Trouver les boutons d'action
    log('üîç Recherche des boutons d\'action...');
    const actionButtons = document.querySelectorAll('button[aria-haspopup="menu"]');
    log(`Trouv√© ${actionButtons.length} boutons d'action`);
    
    if (actionButtons.length === 0) {
      log('‚ùå Aucun bouton d\'action trouv√©', 'error');
      return;
    }
    
    // √âtape 2: Analyser le premier bouton
    const firstButton = actionButtons[0];
    log('üîç Analyse du premier bouton...');
    log(`Bouton HTML: ${firstButton.outerHTML}`);
    log(`Classes: ${firstButton.className}`);
    log(`Attributs: aria-haspopup="${firstButton.getAttribute('aria-haspopup')}", aria-expanded="${firstButton.getAttribute('aria-expanded')}"`);
    
    // √âtape 3: Compter tous les √©l√©ments avant le clic
    const elementsBefore = document.querySelectorAll('*').length;
    log(`√âl√©ments DOM avant clic: ${elementsBefore}`);
    
    // √âtape 4: Cliquer sur le bouton
    log('üñ±Ô∏è Clic sur le bouton...');
    firstButton.click();
    
    // √âtape 5: Attendre et v√©rifier les changements
    await wait(1000);
    
    const elementsAfter = document.querySelectorAll('*').length;
    log(`√âl√©ments DOM apr√®s clic: ${elementsAfter}`);
    log(`Diff√©rence: ${elementsAfter - elementsBefore} nouveaux √©l√©ments`);
    
    // √âtape 6: V√©rifier l'attribut aria-expanded
    const expandedAfter = firstButton.getAttribute('aria-expanded');
    log(`aria-expanded apr√®s clic: "${expandedAfter}"`);
    
    // √âtape 7: Chercher tous les √©l√©ments visibles r√©cemment ajout√©s
    log('üîç Recherche d\'√©l√©ments visibles...');
    const allElements = document.querySelectorAll('*');
    let visibleElements = 0;
    let hiddenElements = 0;
    
    Array.from(allElements).forEach(el => {
      const style = window.getComputedStyle(el);
      if (style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0') {
        visibleElements++;
      } else {
        hiddenElements++;
      }
    });
    
    log(`√âl√©ments visibles: ${visibleElements}, cach√©s: ${hiddenElements}`);
    
    // √âtape 8: Chercher sp√©cifiquement les √©l√©ments de menu
    const menuSelectors = [
      '[role="menu"]',
      '[role="menuitem"]', 
      '[class*="dropdown"]',
      '[data-radix-dropdown-menu-content]',
      '[data-state="open"]',
      '[data-side]'
    ];
    
    log('üîç Recherche avec s√©lecteurs sp√©cifiques...');
    menuSelectors.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      if (elements.length > 0) {
        log(`‚úÖ ${selector}: ${elements.length} trouv√©(s)`, 'success');
        elements.forEach((el, i) => {
          const style = window.getComputedStyle(el);
          const visible = style.display !== 'none' && style.visibility !== 'hidden';
          log(`  [${i}] Visible: ${visible}, Classes: ${el.className}`);
        });
      } else {
        log(`‚ùå ${selector}: 0 trouv√©`);
      }
    });
    
    // √âtape 9: Fermer en cliquant ailleurs
    log('üîÑ Fermeture du menu...');
    document.body.click();
    await wait(500);
    
    const expandedFinal = firstButton.getAttribute('aria-expanded');
    log(`aria-expanded apr√®s fermeture: "${expandedFinal}"`);
    
    log('‚úÖ Test termin√©!', 'success');
    
  } catch (error) {
    log(`‚ùå Erreur: ${error.message}`, 'error');
    console.error(error);
  }
}

// Lancer le test
testDropdownSimple();
