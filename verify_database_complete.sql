-- Script de v√©rification compl√®te de la base de donn√©es Akanda Ap√©ro
-- √Ä ex√©cuter dans Supabase SQL Editor apr√®s les scripts de correction

DO $$
DECLARE
    table_count INTEGER;
    enum_count INTEGER;
    column_count INTEGER;
    test_order_id UUID;
    result_text TEXT;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîç V√âRIFICATION COMPL√àTE DE LA BASE DE DONN√âES';
    RAISE NOTICE '============================================';
    RAISE NOTICE '';
    
    -- 1. V√âRIFICATION DES TABLES PRINCIPALES
    RAISE NOTICE 'üìã 1. V√âRIFICATION DES TABLES';
    RAISE NOTICE '-----------------------------';
    
    -- V√©rifier les tables essentielles
    SELECT COUNT(*) INTO table_count FROM information_schema.tables 
    WHERE table_name IN ('customers', 'orders', 'order_items', 'products', 'categories')
    AND table_schema = 'public';
    
    RAISE NOTICE 'Tables principales trouv√©es: %/5', table_count;
    
    -- D√©tail par table
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'customers') THEN
        RAISE NOTICE '‚úÖ Table customers: OK';
    ELSE
        RAISE NOTICE '‚ùå Table customers: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'orders') THEN
        RAISE NOTICE '‚úÖ Table orders: OK';
    ELSE
        RAISE NOTICE '‚ùå Table orders: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'order_items') THEN
        RAISE NOTICE '‚úÖ Table order_items: OK';
    ELSE
        RAISE NOTICE '‚ùå Table order_items: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'products') THEN
        RAISE NOTICE '‚úÖ Table products: OK';
    ELSE
        RAISE NOTICE '‚ùå Table products: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'categories') THEN
        RAISE NOTICE '‚úÖ Table categories: OK';
    ELSE
        RAISE NOTICE '‚ùå Table categories: MANQUANTE';
    END IF;
    
    RAISE NOTICE '';
    
    -- 2. V√âRIFICATION DES TYPES ENUM
    RAISE NOTICE 'üè∑Ô∏è  2. V√âRIFICATION DES TYPES ENUM';
    RAISE NOTICE '--------------------------------';
    
    -- V√©rifier order_status
    IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'order_status') THEN
        RAISE NOTICE '‚úÖ Type order_status: OK';
        -- Afficher les valeurs
        SELECT string_agg(enumlabel, ', ' ORDER BY enumsortorder) INTO result_text
        FROM pg_enum e JOIN pg_type t ON e.enumtypid = t.oid 
        WHERE t.typname = 'order_status';
        RAISE NOTICE '   Valeurs: %', result_text;
    ELSE
        RAISE NOTICE '‚ùå Type order_status: MANQUANT';
    END IF;
    
    -- V√©rifier payment_status
    IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'payment_status') THEN
        RAISE NOTICE '‚úÖ Type payment_status: OK';
        -- Afficher les valeurs
        SELECT string_agg(enumlabel, ', ' ORDER BY enumsortorder) INTO result_text
        FROM pg_enum e JOIN pg_type t ON e.enumtypid = t.oid 
        WHERE t.typname = 'payment_status';
        RAISE NOTICE '   Valeurs: %', result_text;
    ELSE
        RAISE NOTICE '‚ùå Type payment_status: MANQUANT';
    END IF;
    
    RAISE NOTICE '';
    
    -- 3. V√âRIFICATION DES COLONNES DE LA TABLE ORDERS
    RAISE NOTICE 'üìä 3. V√âRIFICATION DES COLONNES ORDERS';
    RAISE NOTICE '------------------------------------';
    
    -- Colonnes essentielles pour l'API
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'id') THEN
        RAISE NOTICE '‚úÖ orders.id: OK';
    ELSE
        RAISE NOTICE '‚ùå orders.id: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'customer_id') THEN
        RAISE NOTICE '‚úÖ orders.customer_id: OK';
    ELSE
        RAISE NOTICE '‚ùå orders.customer_id: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'status') THEN
        RAISE NOTICE '‚úÖ orders.status: OK';
    ELSE
        RAISE NOTICE '‚ùå orders.status: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'payment_status') THEN
        RAISE NOTICE '‚úÖ orders.payment_status: OK';
    ELSE
        RAISE NOTICE '‚ùå orders.payment_status: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'total_amount') THEN
        RAISE NOTICE '‚úÖ orders.total_amount: OK';
    ELSE
        RAISE NOTICE '‚ùå orders.total_amount: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'delivery_cost') THEN
        RAISE NOTICE '‚úÖ orders.delivery_cost: OK';
    ELSE
        RAISE NOTICE '‚ùå orders.delivery_cost: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'order_number') THEN
        RAISE NOTICE '‚úÖ orders.order_number: OK';
    ELSE
        RAISE NOTICE '‚ùå orders.order_number: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'delivery_latitude') THEN
        RAISE NOTICE '‚úÖ orders.delivery_latitude: OK';
    ELSE
        RAISE NOTICE '‚ùå orders.delivery_latitude: MANQUANTE';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'delivery_longitude') THEN
        RAISE NOTICE '‚úÖ orders.delivery_longitude: OK';
    ELSE
        RAISE NOTICE '‚ùå orders.delivery_longitude: MANQUANTE';
    END IF;
    
    RAISE NOTICE '';
    
    -- 4. V√âRIFICATION DES FONCTIONS
    RAISE NOTICE '‚öôÔ∏è  4. V√âRIFICATION DES FONCTIONS';
    RAISE NOTICE '-------------------------------';
    
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'generate_order_number') THEN
        RAISE NOTICE '‚úÖ Fonction generate_order_number: OK';
    ELSE
        RAISE NOTICE '‚ùå Fonction generate_order_number: MANQUANTE';
    END IF;
    
    RAISE NOTICE '';
    
    -- 5. TEST DE CR√âATION D'UNE COMMANDE
    RAISE NOTICE 'üß™ 5. TEST DE CR√âATION DE COMMANDE';
    RAISE NOTICE '---------------------------------';
    
    BEGIN
        -- Cr√©er un client test s'il n'existe pas
        INSERT INTO customers (
            id, 
            full_name, 
            phone, 
            whatsapp_number,
            email,
            created_at,
            updated_at
        ) VALUES (
            gen_random_uuid(),
            'Client Test V√©rification',
            '+24177123456',
            '+24177123456',
            'test.verification@akanda-apero.com',
            NOW(),
            NOW()
        ) ON CONFLICT (email) DO NOTHING;
        
        -- Cr√©er une commande test
        INSERT INTO orders (
            customer_id,
            total_amount,
            subtotal,
            delivery_cost,
            discount,
            status,
            payment_status,
            delivery_address,
            delivery_latitude,
            delivery_longitude,
            whatsapp_number,
            created_at,
            updated_at
        ) VALUES (
            (SELECT id FROM customers WHERE email = 'test.verification@akanda-apero.com' LIMIT 1),
            15000,
            12000,
            3000,
            0,
            'Nouvelle'::order_status,
            'En attente'::payment_status,
            'Adresse test Libreville',
            0.3901,
            9.4544,
            '+24177123456',
            NOW(),
            NOW()
        ) RETURNING id INTO test_order_id;
        
        RAISE NOTICE '‚úÖ Commande test cr√©√©e avec ID: %', test_order_id;
        
        -- V√©rifier le num√©ro de commande g√©n√©r√©
        SELECT order_number INTO result_text FROM orders WHERE id = test_order_id;
        RAISE NOTICE '‚úÖ Num√©ro de commande g√©n√©r√©: %', result_text;
        
        -- Nettoyer la commande test
        DELETE FROM orders WHERE id = test_order_id;
        RAISE NOTICE '‚úÖ Commande test supprim√©e';
        
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Erreur lors du test de cr√©ation: %', SQLERRM;
    END;
    
    RAISE NOTICE '';
    
    -- 6. STATISTIQUES DES DONN√âES
    RAISE NOTICE 'üìà 6. STATISTIQUES DES DONN√âES';
    RAISE NOTICE '-----------------------------';
    
    -- Compter les enregistrements
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'customers') THEN
        SELECT COUNT(*) INTO table_count FROM customers;
        RAISE NOTICE 'Clients: % enregistrements', table_count;
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'orders') THEN
        SELECT COUNT(*) INTO table_count FROM orders;
        RAISE NOTICE 'Commandes: % enregistrements', table_count;
        
        -- Statistiques par statut
        FOR result_text IN 
            SELECT status::text || ': ' || COUNT(*)::text 
            FROM orders 
            GROUP BY status 
            ORDER BY status
        LOOP
            RAISE NOTICE '  - %', result_text;
        END LOOP;
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'products') THEN
        SELECT COUNT(*) INTO table_count FROM products;
        RAISE NOTICE 'Produits: % enregistrements', table_count;
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'categories') THEN
        SELECT COUNT(*) INTO table_count FROM categories;
        RAISE NOTICE 'Cat√©gories: % enregistrements', table_count;
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ V√âRIFICATION TERMIN√âE';
    RAISE NOTICE '========================';
    RAISE NOTICE '';
    RAISE NOTICE 'Si tous les √©l√©ments sont marqu√©s ‚úÖ, la base de donn√©es est pr√™te !';
    RAISE NOTICE 'Sinon, ex√©cutez les scripts de correction n√©cessaires.';
    RAISE NOTICE '';
    
END $$;
