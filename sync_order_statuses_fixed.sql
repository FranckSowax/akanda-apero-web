-- Script pour synchroniser les statuts de commandes avec les valeurs fran√ßaises
-- √Ä ex√©cuter dans Supabase SQL Editor

DO $$
DECLARE
    status_rec RECORD;
    payment_rec RECORD;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîÑ SYNCHRONISATION DES STATUTS DE COMMANDES';
    RAISE NOTICE '==========================================';
    RAISE NOTICE '';
    
    -- 1. Cr√©er ou recr√©er le type order_status avec valeurs fran√ßaises
    DROP TYPE IF EXISTS order_status CASCADE;
    CREATE TYPE order_status AS ENUM (
        'Nouvelle', 'Confirm√©e', 'En pr√©paration', 'Pr√™te', 
        'En livraison', 'Livr√©e', 'Annul√©e'
    );
    RAISE NOTICE '‚úÖ Type order_status cr√©√© avec valeurs fran√ßaises';
    
    -- 2. Cr√©er ou recr√©er le type payment_status avec valeurs fran√ßaises
    DROP TYPE IF EXISTS payment_status CASCADE;
    CREATE TYPE payment_status AS ENUM (
        'En attente', 'Pay√©', '√âchou√©', 'Rembours√©'
    );
    RAISE NOTICE '‚úÖ Type payment_status cr√©√© avec valeurs fran√ßaises';
    
    -- 3. V√©rifier si la table orders existe
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'orders') THEN
        RAISE NOTICE '‚úÖ Table orders trouv√©e';
        
        -- Ajouter ou modifier la colonne status
        IF EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'orders' AND column_name = 'status'
        ) THEN
            -- Modifier le type de la colonne existante
            ALTER TABLE orders ALTER COLUMN status DROP DEFAULT;
            ALTER TABLE orders ALTER COLUMN status TYPE order_status USING 'Nouvelle'::order_status;
            ALTER TABLE orders ALTER COLUMN status SET DEFAULT 'Nouvelle'::order_status;
            RAISE NOTICE '‚úÖ Colonne orders.status mise √† jour';
        ELSE
            -- Ajouter la colonne si elle n'existe pas
            ALTER TABLE orders ADD COLUMN status order_status DEFAULT 'Nouvelle'::order_status;
            RAISE NOTICE '‚úÖ Colonne orders.status ajout√©e';
        END IF;
        
        -- Ajouter ou modifier la colonne payment_status
        IF EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'orders' AND column_name = 'payment_status'
        ) THEN
            ALTER TABLE orders ALTER COLUMN payment_status DROP DEFAULT;
            ALTER TABLE orders ALTER COLUMN payment_status TYPE payment_status USING 'En attente'::payment_status;
            ALTER TABLE orders ALTER COLUMN payment_status SET DEFAULT 'En attente'::payment_status;
            RAISE NOTICE '‚úÖ Colonne orders.payment_status mise √† jour';
        ELSE
            ALTER TABLE orders ADD COLUMN payment_status payment_status DEFAULT 'En attente'::payment_status;
            RAISE NOTICE '‚úÖ Colonne orders.payment_status ajout√©e';
        END IF;
        
        -- Mettre √† jour les valeurs NULL
        UPDATE orders SET status = 'Nouvelle'::order_status WHERE status IS NULL;
        UPDATE orders SET payment_status = 'En attente'::payment_status WHERE payment_status IS NULL;
        RAISE NOTICE '‚úÖ Valeurs NULL mises √† jour avec les d√©fauts';
        
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  Table orders non trouv√©e - elle sera cr√©√©e automatiquement';
    END IF;
    
    -- 4. V√©rification finale et statistiques
    RAISE NOTICE '';
    RAISE NOTICE 'üîç V√âRIFICATION FINALE';
    RAISE NOTICE '=====================';
    
    -- Compter les commandes par statut (si la table existe et a des donn√©es)
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'orders') THEN
        -- V√©rifier s'il y a des commandes
        IF EXISTS (SELECT 1 FROM orders LIMIT 1) THEN
            RAISE NOTICE 'üìä R√âPARTITION DES STATUTS :';
            
            FOR status_rec IN 
                SELECT status::text as status_name, COUNT(*) as count_val 
                FROM orders 
                WHERE status IS NOT NULL
                GROUP BY status 
                ORDER BY status
            LOOP
                RAISE NOTICE '   ‚Ä¢ "%" : % commandes', status_rec.status_name, status_rec.count_val;
            END LOOP;
            
            RAISE NOTICE '';
            RAISE NOTICE 'üí≥ R√âPARTITION DES PAIEMENTS :';
            
            FOR payment_rec IN 
                SELECT payment_status::text as payment_name, COUNT(*) as count_val 
                FROM orders 
                WHERE payment_status IS NOT NULL
                GROUP BY payment_status 
                ORDER BY payment_status
            LOOP
                RAISE NOTICE '   ‚Ä¢ "%" : % commandes', payment_rec.payment_name, payment_rec.count_val;
            END LOOP;
        ELSE
            RAISE NOTICE 'üìä Aucune commande trouv√©e dans la table orders';
        END IF;
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ SYNCHRONISATION TERMIN√âE AVEC SUCC√àS !';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã STATUTS DE COMMANDE DISPONIBLES :';
    RAISE NOTICE '   ‚Ä¢ Nouvelle (d√©faut pour nouvelles commandes)';
    RAISE NOTICE '   ‚Ä¢ Confirm√©e (commande valid√©e par admin)';
    RAISE NOTICE '   ‚Ä¢ En pr√©paration (pr√©paration en cours)';
    RAISE NOTICE '   ‚Ä¢ Pr√™te (pr√™te pour livraison/retrait)';
    RAISE NOTICE '   ‚Ä¢ En livraison (en cours de livraison)';
    RAISE NOTICE '   ‚Ä¢ Livr√©e (livr√©e avec succ√®s)';
    RAISE NOTICE '   ‚Ä¢ Annul√©e (commande annul√©e)';
    RAISE NOTICE '';
    RAISE NOTICE 'üí≥ STATUTS DE PAIEMENT DISPONIBLES :';
    RAISE NOTICE '   ‚Ä¢ En attente (d√©faut)';
    RAISE NOTICE '   ‚Ä¢ Pay√© (paiement confirm√©)';
    RAISE NOTICE '   ‚Ä¢ √âchou√© (paiement √©chou√©)';
    RAISE NOTICE '   ‚Ä¢ Rembours√© (remboursement effectu√©)';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Le frontend TypeScript est maintenant synchronis√© !';
    RAISE NOTICE '‚úÖ Les notifications WhatsApp fonctionneront correctement !';
    RAISE NOTICE '';
    
END $$;
