/**
 * Test final pour le dropdown menu r√©par√©
 * √Ä ex√©cuter dans la console du navigateur sur /admin/orders
 */

console.log('üéâ TEST DROPDOWN R√âPAR√â - D√âMARRAGE');
console.log('=================================');

const log = (message, type = 'info') => {
  const colors = {
    info: 'color: #2196F3',
    success: 'color: #4CAF50; font-weight: bold',
    error: 'color: #F44336; font-weight: bold',
    warning: 'color: #FF9800; font-weight: bold'
  };
  console.log(`%c${message}`, colors[type]);
};

const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function testFixedDropdown() {
  try {
    // Test 1: V√©rifier les boutons d'action
    log('üìã TEST 1: Boutons d\'action');
    const actionButtons = document.querySelectorAll('button[aria-haspopup="menu"]');
    log(`‚úÖ Trouv√© ${actionButtons.length} boutons d'action`, 'success');
    
    if (actionButtons.length === 0) {
      log('‚ùå Aucun bouton d\'action trouv√©', 'error');
      return;
    }
    
    // Test 2: Ouvrir le dropdown
    log('üìã TEST 2: Ouverture du dropdown');
    const firstButton = actionButtons[0];
    const initialExpanded = firstButton.getAttribute('aria-expanded');
    log(`√âtat initial: aria-expanded="${initialExpanded}"`);
    
    firstButton.click();
    await wait(300);
    
    const expandedAfter = firstButton.getAttribute('aria-expanded');
    log(`√âtat apr√®s clic: aria-expanded="${expandedAfter}"`);
    
    if (expandedAfter === 'true') {
      log('‚úÖ Dropdown ouvert avec succ√®s!', 'success');
    } else {
      log('‚ùå Dropdown ne s\'est pas ouvert', 'error');
      return;
    }
    
    // Test 3: V√©rifier les menu items
    log('üìã TEST 3: V√©rification des menu items');
    const menuItems = document.querySelectorAll('[role="menuitem"]');
    log(`‚úÖ Trouv√© ${menuItems.length} menu items`, 'success');
    
    // Test 4: Chercher le bouton "Guide de pr√©paration"
    log('üìã TEST 4: Recherche du bouton "Guide de pr√©paration"');
    let preparationButton = null;
    
    for (const item of menuItems) {
      const text = item.textContent.toLowerCase();
      if (text.includes('guide de pr√©paration') || text.includes('pr√©paration')) {
        preparationButton = item;
        log('üéØ ‚úÖ Bouton "Guide de pr√©paration" trouv√©!', 'success');
        log(`   Texte: "${item.textContent.trim()}"`, 'info');
        log(`   Classes: ${item.className}`, 'info');
        break;
      }
    }
    
    if (!preparationButton) {
      log('‚ùå Bouton "Guide de pr√©paration" non trouv√©', 'error');
      return;
    }
    
    // Test 5: Tester le clic sur "Guide de pr√©paration"
    log('üìã TEST 5: Test du clic sur "Guide de pr√©paration"');
    preparationButton.click();
    await wait(1000);
    
    // V√©rifier si le modal s'ouvre
    const modalSelectors = [
      '[role="dialog"]',
      '.fixed.inset-0',
      '[data-testid*="modal"]',
      '[class*="modal"]'
    ];
    
    let modalFound = false;
    for (const selector of modalSelectors) {
      const modal = document.querySelector(selector);
      if (modal) {
        log(`‚úÖ Modal trouv√© avec: ${selector}`, 'success');
        modalFound = true;
        
        // V√©rifier le contenu du modal
        const modalText = modal.textContent.toLowerCase();
        if (modalText.includes('pr√©paration') || modalText.includes('commande')) {
          log('‚úÖ Modal de pr√©paration confirm√©!', 'success');
        }
        break;
      }
    }
    
    if (!modalFound) {
      log('‚ö†Ô∏è Modal non d√©tect√© (peut √™tre normal si pas de donn√©es)', 'warning');
    }
    
    // Test 6: V√©rifier que le dropdown se ferme
    log('üìã TEST 6: V√©rification de la fermeture du dropdown');
    const expandedFinal = firstButton.getAttribute('aria-expanded');
    log(`√âtat final: aria-expanded="${expandedFinal}"`);
    
    if (expandedFinal === 'false') {
      log('‚úÖ Dropdown ferm√© automatiquement apr√®s clic', 'success');
    }
    
    // R√©sum√© final
    log('üèÜ R√âSUM√â FINAL', 'success');
    console.log('==================');
    log('‚úÖ Boutons d\'action d√©tect√©s', 'success');
    log('‚úÖ Dropdown s\'ouvre correctement', 'success');
    log('‚úÖ Menu items pr√©sents', 'success');
    log('‚úÖ Bouton "Guide de pr√©paration" accessible', 'success');
    log('‚úÖ Clic fonctionne (modal ou handler appel√©)', 'success');
    log('‚úÖ Dropdown se ferme automatiquement', 'success');
    
    log('üéâ TOUS LES TESTS R√âUSSIS! Le OrderPreparationModal est maintenant testable!', 'success');
    
  } catch (error) {
    log(`‚ùå Erreur: ${error.message}`, 'error');
    console.error(error);
  }
}

// Lancer le test
testFixedDropdown();
