// Script de diagnostic pour le probl√®me de synchronisation des promotions
// Ex√©cuter ce script dans la console du navigateur sur les deux instances

console.log('üîç DIAGNOSTIC DE SYNCHRONISATION DES PROMOTIONS');
console.log('================================================');

// 1. V√©rifier la configuration Supabase
console.log('\n1. Configuration Supabase:');
console.log('URL:', window.location.origin);

// V√©rifier les variables d'environnement c√¥t√© client
const checkEnvVars = () => {
  // Tenter de r√©cup√©rer les variables depuis window ou document
  const scripts = document.querySelectorAll('script');
  let foundConfig = false;
  
  scripts.forEach(script => {
    if (script.textContent && script.textContent.includes('NEXT_PUBLIC_SUPABASE_URL')) {
      console.log('‚úÖ Configuration Supabase trouv√©e dans les scripts');
      foundConfig = true;
    }
  });
  
  if (!foundConfig) {
    console.log('‚ö†Ô∏è Configuration Supabase non trouv√©e dans les scripts');
  }
  
  return foundConfig;
};

checkEnvVars();

// 2. V√©rifier les donn√©es en direct depuis Supabase
async function checkPromotionsData() {
  try {
    console.log('\n2. Donn√©es Supabase en direct:');
    
    // Cr√©er le client Supabase directement avec les valeurs hardcod√©es
    const { createClient } = await import('https://cdn.skypack.dev/@supabase/supabase-js');
    
    const supabaseUrl = 'https://mcdpzoisorbnhkjhljaj.supabase.co';
    const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1jZHB6b2lzb3JibmhramhsamFqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY2MjM3ODQsImV4cCI6MjA2MjE5OTc4NH0.S4omBGzpY3_8TEYJD2YBQwoyZg67nBOEJIUrZ4pZkcA';
    
    const supabase = createClient(supabaseUrl, supabaseAnonKey);
    
    console.log('‚úÖ Client Supabase cr√©√© avec:');
    console.log('  URL:', supabaseUrl);
    console.log('  Key:', supabaseAnonKey.substring(0, 20) + '...');
    
    // R√©cup√©rer toutes les promotions
    const { data: allPromotions, error: allError } = await supabase
      .from('promotions')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (allError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', allError);
      return;
    }
    
    console.log('üìä Total promotions:', allPromotions?.length || 0);
    
    // Compter par statut
    const statusCounts = {
      active: allPromotions?.filter(p => p.status === 'active').length || 0,
      scheduled: allPromotions?.filter(p => p.status === 'scheduled').length || 0,
      expired: allPromotions?.filter(p => p.status === 'expired').length || 0,
      inactive: allPromotions?.filter(p => p.status === 'inactive').length || 0
    };
    
    console.log('üìà R√©partition par statut:');
    console.log('  - Actives:', statusCounts.active);
    console.log('  - Planifi√©es:', statusCounts.scheduled);
    console.log('  - Expir√©es:', statusCounts.expired);
    console.log('  - Inactives:', statusCounts.inactive);
    
    // Afficher les promotions planifi√©es en d√©tail
    const scheduledPromotions = allPromotions?.filter(p => p.status === 'scheduled') || [];
    console.log('\nüìÖ Promotions planifi√©es d√©taill√©es:');
    scheduledPromotions.forEach((promo, index) => {
      console.log(`  ${index + 1}. ${promo.name} (${promo.code})`);
      console.log(`     D√©but: ${new Date(promo.start_date).toLocaleDateString('fr-FR')}`);
      console.log(`     Fin: ${new Date(promo.end_date).toLocaleDateString('fr-FR')}`);
    });
    
    // 3. V√©rifier le cache localStorage
    console.log('\n3. Cache localStorage:');
    const cacheKeys = Object.keys(localStorage).filter(key => 
      key.includes('supabase') || key.includes('promotion')
    );
    console.log('Cl√©s de cache trouv√©es:', cacheKeys);
    
    // 4. V√©rifier les cookies de session
    console.log('\n4. Cookies de session:');
    const cookies = document.cookie.split(';').map(c => c.trim());
    const supabaseCookies = cookies.filter(c => c.includes('supabase'));
    console.log('Cookies Supabase:', supabaseCookies.length);
    
    // 5. Informations sur l'environnement
    console.log('\n5. Informations environnement:');
    console.log('User Agent:', navigator.userAgent);
    console.log('URL actuelle:', window.location.href);
    console.log('Timestamp:', new Date().toISOString());
    
    return {
      url: window.location.origin,
      totalPromotions: allPromotions?.length || 0,
      statusCounts,
      scheduledPromotions: scheduledPromotions.map(p => ({
        name: p.name,
        code: p.code,
        start_date: p.start_date,
        end_date: p.end_date
      }))
    };
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
    return null;
  }
}

// Ex√©cuter le diagnostic
checkPromotionsData().then(result => {
  if (result) {
    console.log('\n‚úÖ Diagnostic termin√©. R√©sultats:', result);
    
    // Sauvegarder les r√©sultats pour comparaison
    window.promotionsDiagnostic = result;
    console.log('\nüíæ R√©sultats sauvegard√©s dans window.promotionsDiagnostic');
    console.log('Vous pouvez comparer avec l\'autre instance en ex√©cutant:');
    console.log('console.log(window.promotionsDiagnostic);');
  }
});

// Fonction pour nettoyer le cache si n√©cessaire
window.clearPromotionsCache = function() {
  console.log('üßπ Nettoyage du cache...');
  
  // Nettoyer localStorage
  Object.keys(localStorage).forEach(key => {
    if (key.includes('supabase') || key.includes('promotion')) {
      localStorage.removeItem(key);
      console.log('Supprim√©:', key);
    }
  });
  
  // Nettoyer sessionStorage
  Object.keys(sessionStorage).forEach(key => {
    if (key.includes('supabase') || key.includes('promotion')) {
      sessionStorage.removeItem(key);
      console.log('Supprim√©:', key);
    }
  });
  
  console.log('‚úÖ Cache nettoy√©. Rechargez la page.');
};

console.log('\nüõ†Ô∏è Fonctions utiles disponibles:');
console.log('- window.clearPromotionsCache() : Nettoyer le cache');
console.log('- window.promotionsDiagnostic : Voir les r√©sultats du diagnostic');
